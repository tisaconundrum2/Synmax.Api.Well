// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Synmax.Api.Well.Data;

#nullable disable

namespace Synmax.Api.Well.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250921224436_RemoveSeeding")]
    partial class RemoveSeeding
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.9");

            modelBuilder.Entity("Synmax.Api.Well.Models.WellDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("API")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CRS")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("DFElevation")
                        .HasColumnType("REAL");

                    b.Property<string>("DirectionalStatus")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("GLElevation")
                        .HasColumnType("REAL");

                    b.Property<double>("KBElevation")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("LastInspection")
                        .HasColumnType("TEXT");

                    b.Property<double>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<double>("Longitude")
                        .HasColumnType("REAL");

                    b.Property<string>("MineralOwner")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MultiLateral")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Operator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PotashWaiver")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SingleMultipleCompletion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("SpudDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SurfaceLocation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SurfaceOwner")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("TVD")
                        .HasColumnType("REAL");

                    b.Property<string>("WellType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("WorkType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("WellDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
