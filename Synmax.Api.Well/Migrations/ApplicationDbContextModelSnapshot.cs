// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Synmax.Api.Well.Data;

#nullable disable

namespace Synmax.Api.Well.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Synmax.Api.Well.Models.WellDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("API")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CRS")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("DFElevation")
                        .HasColumnType("double precision");

                    b.Property<string>("DirectionalStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("GLElevation")
                        .HasColumnType("double precision");

                    b.Property<double>("KBElevation")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("LastInspection")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("MineralOwner")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MultiLateral")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Operator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PotashWaiver")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SingleMultipleCompletion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("SpudDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SurfaceLocation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SurfaceOwner")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("TVD")
                        .HasColumnType("double precision");

                    b.Property<string>("WellType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WorkType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("WellDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
